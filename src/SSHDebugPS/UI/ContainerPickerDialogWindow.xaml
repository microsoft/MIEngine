<!--
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->
<platformui:DialogWindow x:Class="Microsoft.SSHDebugPS.UI.ContainerPickerDialogWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:platformui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
                 xmlns:vsui="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
                 xmlns:vsimaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
                 xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
                 xmlns:local="clr-namespace:Microsoft.SSHDebugPS"
                 xmlns:ui="clr-namespace:Microsoft.SSHDebugPS.UI"
                 xmlns:docker="clr-namespace:Microsoft.SSHDebugPS.Docker"
                 MinWidth="450"
                 MinHeight="500"
                 Width="450"
                 Height="600"
                 ShowInTaskbar="False"
                 Name="ContainerPickerDialog"
                 Background="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowPanelBrushKey}}"
                 Foreground="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowPanelTextBrushKey}}"
                 FontFamily="{DynamicResource VsFont.EnvironmentFontFamily}"
                 FontSize="{DynamicResource VsFont.EnvironmentFontSize}"
                 Title="{x:Static local:UIResources.DialogTitle}"
                 WindowStartupLocation="CenterOwner">
    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="32"
            GlassFrameThickness="1"
            ResizeBorderThickness="5"
            UseAeroCaptionButtons="False" />
    </WindowChrome.WindowChrome>


    <platformui:DialogWindow.Resources>
        <!-- Converters-->
        <docker:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <docker:BoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" Negative="True" />
        <docker:TextToVisibilityConverter x:Key="TextToVisibilityConverter" />
        <!--Styles-->
        <!-- Title Bar -->
        <Style x:Key="TitleBarButtonStyle" TargetType="Button">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Width" Value="46" />
            <Setter Property="Height" Value="32" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter Focusable="False"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverGlyphBrushKey}}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverBorderBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownGlyphBrushKey}}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownBorderBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter Focusable="False"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverGlyphBrushKey}}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonHoverBorderBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownGlyphBrushKey}}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonDownBorderBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TitleBarButtonPathStyle" TargetType="{x:Type Path}">
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Fill" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
        </Style>

        <Style x:Key="GlyphPathStyle"
               TargetType="{x:Type Path}">
            <Setter Property="Stroke"
                            Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
        </Style>
        <Style x:Key="ConnectionTypeComboBoxStyle"
               TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static vsui:VsResourceKeys.ComboBoxStyleKey}}">
            <Setter Property="Grid.ColumnSpan"
                            Value="1" />
            <Setter Property="IsEnabled"
                            Value="True" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding SupportSSHConnections}"
                             Value="false">
                    <Setter Property="Grid.ColumnSpan"
                            Value="2" />
                    <Setter Property="IsEnabled"
                            Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MainLabelStyle"
               TargetType="{x:Type Label}">
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="Margin"
                    Value="0" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformui:ThemedDialogColors.WindowButtonGlyphBrushKey}}" />
        </Style>
        <Style x:Key="HeaderLabelStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="FontWeight"
                    Value="Bold" />
            <Setter Property="Margin"
                    Value="6,4,0,4" />
        </Style>
        <Style x:Key="HeaderTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="Margin"
                    Value="6,4,0,4" />
        </Style>
        <Style x:Key="BodyLabelStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="Margin"
                    Value="6,4,0,0" />
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="VerticalAlignment"
                    Value="Top" />
        </Style>
        <Style x:Key="BodyTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Top" />
            <Setter Property="TextWrapping"
                    Value="WrapWithOverflow" />
            <Setter Property="TextTrimming"
                    Value="CharacterEllipsis" />
            <Setter Property="Margin"
                    Value="6,4,12,0" />
        </Style>
        <Style x:Key="ComboBoxItemStyle"
               TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Static vsui:VsResourceKeys.ComboBoxItemStyleKey}}">
            <Setter Property="AutomationProperties.Name"
                    Value="{Binding DisplayName}" />
        </Style>
        <!-- ListBoxItem Styles-->
        <Style x:Key="ListBoxItemFocusVisualStyle"
               TargetType="{x:Type Control}">
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <Style x:Key="ListBoxStyle"
               TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Static vsui:VsResourceKeys.ThemedDialogListBoxStyleKey}}">
            <EventSetter Event="GotKeyboardFocus"
                         Handler="ListBox_GotKeyboardFocus" />
            <Setter Property="ItemTemplate"
                    Value="{DynamicResource instanceLayout}" />
            <Setter Property="IsSynchronizedWithCurrentItem"
                    Value="True" />
            <Setter Property="BorderThickness"
                    Value="1" />
            <Setter Property="BorderBrush"
                    Value="{DynamicResource {x:Static platformui:EnvironmentColors.SystemActiveBorderBrushKey}}" />
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                    Value="Visible" />
            <Setter Property="Focusable"
                    Value="False" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <DockPanel IsItemsHost="True"
                                   LastChildFill="False" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListBoxContainerStyle"
               TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Static vsui:VsResourceKeys.ThemedDialogListViewItemStyleKey}}">

            <Setter Property="AutomationProperties.Name"
                    Value="{Binding DockerViewModelAutomationName, Mode=OneWay}" />
            <Setter Property="DockPanel.Dock"
                    Value="Top" />
            <Setter Property="BorderBrush"
                    Value="{DynamicResource {x:Static platformui:EnvironmentColors.SystemInactiveBorderBrushKey}}" />
            <Setter Property="BorderThickness"
                    Value="0" />
            <Setter Property="Padding"
                    Value="1" />
            <Setter Property="IsSelected"
                    Value="{Binding IsSelected, Mode=TwoWay}" />
            <Setter Property="FocusVisualStyle"
                    Value="{StaticResource ListBoxItemFocusVisualStyle}" />
            <Setter Property="HorizontalContentAlignment"
                    Value="Stretch" />
        </Style>
        <!-- Overriding default focus visual key style for the hyperlink keyboard focus box. 
             The default color is hardcoded as black and now it is bound to a system brush to support high contrast -->
        <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static platformui:EnvironmentColors.ControlLinkTextHoverBrushKey}}"
                                   StrokeDashArray="1 2"
                                   SnapsToDevicePixels="true"
                                   Margin="-2"
                                   />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="instanceLayout"
                      DataType="DockerContainerViewModel">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="20" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Button x:Name="ContainerDetailsExpander" 
                        Grid.Row="0"
                        Grid.Column="0"
                        Style="{StaticResource ExpanderButtonStyle}"
                        AutomationProperties.Name="{x:Static local:UIResources.ExpandCommandAutomationName}"
                        AutomationProperties.ItemStatus="{Binding ExpanderItemStatus}"
                        Command="{Binding ExpandCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource self}}"
                        ToolTip="{Binding ExpandCommand.ToolTip}"
                        Background="Transparent"
                        BorderThickness="0"
                        IsTabStop="False">
                    <DockPanel>
                        <Path x:Name="rightArrow"
                              AutomationProperties.HelpText="{x:Static local:UIResources.Collapsed}"
                              Style="{StaticResource GlyphPathStyle}"
                              Data="M 0.5,0.5 L 4.5,4.5 L 0.5,8.5 Z"
                              HorizontalAlignment="Center"
                              SnapsToDevicePixels="false"
                              StrokeThickness="2"
                              VerticalAlignment="Center"
                              Visibility="{Binding IsExpanded, Converter={StaticResource InverseBoolToVisibilityConverter}, Mode=OneWay}" />
                        <Path x:Name="downArrow"
                              AutomationProperties.HelpText="{x:Static local:UIResources.Expanded}"
                              Style="{StaticResource GlyphPathStyle}"
                              Data="M 5.5,2.5 L 0.5,7.5 L 5.5,7.5 Z"
                              HorizontalAlignment="Center"
                              SnapsToDevicePixels="false"
                              Fill="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}"
                              StrokeThickness="2"
                              VerticalAlignment="Center"
                              Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
                    </DockPanel>
                </Button>
                <DockPanel Grid.Row="0"
                           Grid.Column="1">
                    <TextBlock DockPanel.Dock="Left"
                               x:Name="Name"
                               AutomationProperties.Name="{Binding Name}"
                               Text="{Binding Name}"
                               ToolTip="{Binding Name}"
                               Style="{StaticResource HeaderLabelStyle}" />
                    <TextBlock DockPanel.Dock="Left"
                               x:Name="Id"
                               Text="{Binding ShortId, StringFormat=' ({0}...)'}"
                               ToolTip="{Binding Id}"
                               Style="{StaticResource HeaderTextBlockStyle}" />
                    <TextBlock DockPanel.Dock="Right"
                               x:Name="Platform"
                               Text="{Binding Platform, StringFormat=' ({0})'}"
                               ToolTip="{Binding Platform}"
                               Style="{StaticResource HeaderTextBlockStyle}" />
                </DockPanel>

                <Grid Grid.Row="1"
                      Grid.Column="1"
                      x:Name="GridBody"
                      Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="labelCol"
                                          Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.Resources>
                        <Style TargetType="{x:Type Label}">
                            <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static platformui:EnvironmentColors.SystemCaptionTextBrushKey}}" />
                        </Style>
                    </Grid.Resources>
                    <!-- Platform -->
                    <!-- No Top margin on first row -->
                    <TextBlock Grid.Row="0"
                           Grid.Column="0"
                           x:Uid="uidPlatform"
                           Text="{x:Static local:UIResources.PlatformLabelText}"
                           Margin="6,0,0,0"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="0"
                               Grid.Column="1"
                               Tag="1"
                               x:Name="platform"
                               Text="{Binding Platform}"
                               ToolTip="{Binding Platform}"
                               Margin="6,0,12,0"
                               Style="{StaticResource BodyTextBlockStyle}" />

                    <!-- Image -->
                    <TextBlock Grid.Row="1"
                           Grid.Column="0"
                           x:Uid="uidImage"
                           Text="{x:Static local:UIResources.ImageLabelText}"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="1"
                               Grid.Column="1"
                               Tag="2"
                               x:Name="image"
                               Text="{Binding Image}"
                               ToolTip="{Binding Image}"
                               Style="{StaticResource BodyTextBlockStyle}" />

                    <!-- Command -->
                    <TextBlock Grid.Row="2"
                           Grid.Column="0"
                           x:Uid="uidCommand"
                           Text="{x:Static local:UIResources.CommandLabelText}"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="2"
                               Grid.Column="1"
                               Tag="3"
                               x:Name="command"
                               Text="{Binding Command}"
                               Style="{StaticResource BodyTextBlockStyle}"
                               ToolTip="{Binding Command}" />

                    <!-- Status -->
                    <TextBlock Grid.Row="3"
                           Grid.Column="0"
                           x:Uid="uidStatus"
                           Text="{x:Static local:UIResources.StatusLabelText}"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="3"
                               Grid.Column="1"
                               Tag="4"
                               x:Name="status"
                               Text="{Binding Status}"
                               Style="{StaticResource BodyTextBlockStyle}"
                               ToolTip="{Binding Status}" />

                    <!-- Created -->
                    <TextBlock Grid.Row="4"
                           Grid.Column="0"
                           x:Uid="uidCreated"
                           Text="{x:Static local:UIResources.CreatedLabelText}"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="4"
                               Grid.Column="1"
                               Grid.ColumnSpan="2"
                               Tag="5"
                               x:Name="created"
                               Text="{Binding Created}"
                               Style="{StaticResource BodyTextBlockStyle}"
                               ToolTip="{Binding Created}" />

                    <!-- Ports -->
                    <!-- Modified Margin on bottom -->
                    <TextBlock Grid.Row="5"
                           Grid.Column="0"
                           x:Uid="uidPorts"
                           Text="{x:Static local:UIResources.PortsLabelText}"
                           Margin="6,4,0,4"
                           Style="{StaticResource BodyLabelStyle}" />
                    <TextBlock Grid.Row="5"
                               Grid.Column="1"
                               Grid.ColumnSpan="2"
                               Tag="6"
                               x:Name="ports"
                               Text="{Binding FormattedListOfPorts}"
                               Style="{StaticResource BodyTextBlockStyle}"
                               Margin="6,4,0,4"
                               ToolTip="{Binding FormattedListOfPorts}" />
                </Grid>
            </Grid>
        </DataTemplate>
    </platformui:DialogWindow.Resources>

    <!-- Main layout grid -->
    <Grid Focusable="False">
        <Grid.RowDefinitions>
            <RowDefinition Height="32" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Column="0"
                    FontSize="14"
                    Margin="12,2,0,0"
                    VerticalAlignment="Center"
                    Text="{x:Static local:UIResources.DialogTitle}">
            </TextBlock>
            <StackPanel Grid.Column="1"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    WindowChrome.IsHitTestVisibleInChrome="true">

                <Button Style="{DynamicResource TitleBarButtonStyle}" Click="CloseButton_Click">
                    <Path Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z"
                          Style="{StaticResource TitleBarButtonPathStyle}" />
                </Button>
            </StackPanel>
        </Grid>
        
        <!-- Content -->
        <Grid Grid.Row="1" Margin="12" >
            <Grid.RowDefinitions>
                <!--0:Connection label-->
                <RowDefinition Height="Auto" />
                <!--1:Connection combo box, Add new connection-->
                <RowDefinition Height="Auto" />
                <!--2:Hostname label-->
                <RowDefinition Height="Auto" />
                <!--3:Hostname textbox -->
                <RowDefinition Height="Auto" />
                <!--4:Container status/refresh button-->
                <RowDefinition Height="Auto" />
                <!--5:ContainerList-->
                <RowDefinition Height="*" />
                <!--6:Warning Icon and Status Text -->
                <RowDefinition Height="Auto" />
                <!--7:OK/Cancel -->
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!--Connection Type Picker-->
            <Label Grid.Row="0"
               Grid.ColumnSpan="2"
               x:Uid="uidConnectionTypeLabel"
               x:Name="ConnectionTypeLabel"
               MinHeight="16"
               VerticalAlignment="Center"
               Style="{StaticResource MainLabelStyle}"
               Target="{Binding ElementName=ConnectionTypeComboBox}"
               Content="{x:Static local:UIResources.ConnectionLabel}" />
            <ComboBox Grid.Row="1"
                  Grid.Column="0"
                  x:Uid="uidConnectionTypeComboBox"
                  x:Name="ConnectionTypeComboBox"
                  Margin="0,4,0,0"
                  AutomationProperties.LabeledBy="{Binding ElementName=ConnectionTypeLabel}"
                  ToolTip="{x:Static local:UIResources.ConnectionToolTip}"
                  ItemsSource="{Binding SupportedConnections}"
                  SelectedItem="{Binding SelectedConnection}"
                  DisplayMemberPath="DisplayName"
                  ItemContainerStyle="{StaticResource ComboBoxItemStyle}"
                  Style="{StaticResource ConnectionTypeComboBoxStyle}">
            </ComboBox>
            <Button Grid.Row="1"
                Grid.Column="1"
                x:Uid="uidAddConnection"
                x:Name="AddConnection"
                Style="{StaticResource {x:Static vsui:VsResourceKeys.ButtonStyleKey}}"
                AutomationProperties.Name="{x:Static local:UIResources.AddNewSSHConnectionAutomationName}"
                Margin="12,4,0,0"
                MinWidth="75"
                MinHeight="23"
                Command="{Binding AddSSHConnectionCommand}"
                CommandParameter="{Binding}"
                Content="{Binding AddSSHConnectionCommand.Label}"
                ToolTip="{Binding AddSSHConnectionCommand.ToolTip}"
                Visibility="{Binding SupportSSHConnections, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}"/>

            <!-- Hostname label and textbox -->

            <Label Grid.Row="2"
               Grid.ColumnSpan="2"
               x:Uid="uidHostnameLabel"
               x:Name="HostnameLabel"
               Margin="0,9,0,0"
               MinHeight="16"
               VerticalAlignment="Center"
               Style="{StaticResource MainLabelStyle}"
               Target="{Binding ElementName=hostnameTextBox}"
               Content="{x:Static local:UIResources.HostnameLabel}" />
            <TextBox Grid.Row="3"
                 Grid.ColumnSpan="2"
                Style="{StaticResource {x:Static vsui:VsResourceKeys.TextBoxStyleKey}}"
                 Margin="0,4,0,0"
                 Padding="2"
                 x:Uid="uidHostnameTextBox"
                 x:Name="hostnameTextBox"
                 AutomationProperties.Name="{x:Static local:UIResources.HostnameAutomationName}"
                 Text="{Binding Path=Hostname, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 ToolTip="{x:Static local:UIResources.HostnameTip}">
                <TextBox.InputBindings>
                    <KeyBinding Key="Enter" Command="{Binding RefreshCommand}" />
                </TextBox.InputBindings>
            </TextBox>

            <!-- Container Count Text and Refresh Button -->
            <platformui:LiveTextBlock Grid.Row="4"
                   Grid.Column="0"
                   Margin="0,9,0,0"
                   x:Uid="uidStatusLabel"
                   x:Name="ContainerCount"
                   Text="{Binding ContainersFoundText, Mode=OneWay}"
                   TextWrapping="Wrap" />

            <Button Grid.Row="4"
                Grid.Column="1"
                x:Name="RefreshContainerListButton"
                Margin="12,9,0,0"
                HorizontalAlignment="Right"
                Command="{Binding RefreshCommand}"
                Content="{Binding RefreshCommand.Label}"
                ToolTip="{Binding RefreshCommand.ToolTip}"
                Style="{StaticResource {x:Static vsui:VsResourceKeys.ButtonStyleKey}}"/>

            <!-- Container Instance display-->
            <ui:ContainerListView Grid.Row="5"
                 Grid.ColumnSpan="2"
                 Margin="0,4,0,0"
                 Padding="4"
                 x:Name="ContainerListView"
                 AutomationProperties.Name="{x:Static local:UIResources.ContainerList}"
                 AutomationProperties.AutomationId="aidContainerListView"
                 ItemsSource="{Binding Path=ContainerInstances, Mode=OneWay }"
                 SelectedValue="{Binding SelectedContainerInstance}"
                 GotKeyboardFocus="ContainerListView_GotKeyboardFocus"
                 ItemContainerStyle="{StaticResource ListBoxContainerStyle}"
                 Style="{StaticResource ListBoxStyle}"
                 PreviewKeyDown="ContainerListView_PreviewKeyDown" />

            <!-- Status text -->
            <DockPanel Grid.Row="6"
                   Grid.ColumnSpan="2"
                   Visibility="{Binding StatusMessage, Converter={StaticResource TextToVisibilityConverter}, Mode=Oneway}">
                <vsimaging:CrispImage DockPanel.Dock="Left"
                                  x:Name="WarningIcon"
                                  Width="16"
                                  Height="16"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  Margin="4,4,0,0"
                                  Visibility="{Binding StatusIsError, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}"
                                  Moniker="{x:Static catalog:KnownMonikers.StatusWarning}" />
                <platformui:LiveTextBlock DockPanel.Dock="Right"
                       x:Name="StatusMessage"
                       TextWrapping="WrapWithOverflow"
                       Margin="6,12,9,6"
                       Text="{Binding StatusMessage}" />
            </DockPanel>

            <!-- OK / Cancel buttons -->
            <UniformGrid Grid.Row="7"
                     Grid.ColumnSpan="2"
                     Margin="0,12,0,0"
                     HorizontalAlignment="Right"
                     VerticalAlignment="Bottom"
                     Rows="1"
                     Columns="2">
                <Button x:Uid="uidOkayButton"
                    x:Name="OkayButton"
                    Style="{StaticResource {x:Static vsui:VsResourceKeys.ButtonStyleKey}}"
                    MinHeight="23"
                    MinWidth="75"
                    IsDefault="True"
                    Command="{Binding OKCommand}"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="{Binding OKCommand.Label}"/>
                <Button x:Uid="uidCancelButton"
                    x:Name="CancelButton"
                    Style="{StaticResource {x:Static vsui:VsResourceKeys.ButtonStyleKey}}"
                    Margin="6,0,0,0"
                    MinHeight="23"
                    MinWidth="75"
                    IsCancel="True"
                    Command="{Binding CancelCommand}"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="{Binding CancelCommand.Label}" />
            </UniformGrid>
        </Grid>

    </Grid>
</platformui:DialogWindow>
