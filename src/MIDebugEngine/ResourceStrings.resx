<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BreakpointAtInvalidAddress" xml:space="preserve">
    <value>Module containing this breakpoint has not yet loaded or the breakpoint address could not be obtained.</value>
  </data>
  <data name="ConnectingMessage" xml:space="preserve">
    <value>Connecting debugger to '{0}'</value>
  </data>
  <data name="EngineName" xml:space="preserve">
    <value>Sample Engine</value>
  </data>
  <data name="ErrorReadingFile" xml:space="preserve">
    <value>Error "{0}" while reading file: {1}</value>
  </data>
  <data name="ExceptionSettingsError" xml:space="preserve">
    <value>Error while updating exception settings. {0}</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found: {0}</value>
  </data>
  <data name="InitializingDebugger" xml:space="preserve">
    <value>Initializing Debugger</value>
  </data>
  <data name="InvalidAssignment" xml:space="preserve">
    <value>Invalid assignment </value>
  </data>
  <data name="LoadingSymbolCaption" xml:space="preserve">
    <value>Loading Symbols</value>
  </data>
  <data name="LoadingSymbolMessage" xml:space="preserve">
    <value>Loading symbols for module {0}</value>
  </data>
  <data name="ModuleLoadMessage" xml:space="preserve">
    <value>Loaded '{0}'. {1}</value>
  </data>
  <data name="ModuleUnloadMessage" xml:space="preserve">
    <value>Unloaded '{0}'.</value>
  </data>
  <data name="ModuleLoadedWithSymbols" xml:space="preserve">
    <value>Symbols loaded.</value>
  </data>
  <data name="MoreView" xml:space="preserve">
    <value>[More...]</value>
  </data>
  <data name="SymbolsLoadedInfo" xml:space="preserve">
    <value>Symbols loaded - {0}</value>
  </data>
  <data name="ModuleLoadedWithoutSymbols" xml:space="preserve">
    <value>Cannot find or open the symbol file.</value>
  </data>
  <data name="SymbolsNotLoadedInfo" xml:space="preserve">
    <value>Symbols not loaded</value>
  </data>
  <data name="LongBind" xml:space="preserve">
    <value>Attempting to bind the breakpoint....</value>
  </data>
  <data name="NoSideEffectsVisualizerMessage" xml:space="preserve">
    <value>Explicit refresh required for visualized expressions</value>
  </data>
  <data name="RawView" xml:space="preserve">
    <value>[Raw View]</value>
  </data>
  <data name="SettingSymbolSearchPath" xml:space="preserve">
    <value>Setting symbol search path</value>
  </data>
  <data name="ThreadExited" xml:space="preserve">
    <value>Thread has exited</value>
  </data>
  <data name="UnknownCode" xml:space="preserve">
    <value>[Unknown/Just-In-Time compiled code]</value>
  </data>
  <data name="UnsupportedBreakpoint" xml:space="preserve">
    <value>Unsupported Breakpoint Type</value>
  </data>
  <data name="UnsupportedConditionalBreakpoint" xml:space="preserve">
    <value>Conditional breakpoints are not supported.</value>
  </data>
  <data name="UnsupportedPassCountBreakpoint" xml:space="preserve">
    <value>Hit counts on breakpoints are not supported.</value>
  </data>
  <data name="VisualizedView" xml:space="preserve">
    <value>[Visualized View]</value>
  </data>
  <data name="VisualizingExpressionCaption" xml:space="preserve">
    <value>Visualizing Expression</value>
  </data>
  <data name="VisualizingExpressionMessage" xml:space="preserve">
    <value>Visualizing expression: {0}</value>
  </data>
  <data name="Failed_ExecCommandError" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="LoadingCoreDumpMessage" xml:space="preserve">
    <value>Loading core dump {0}</value>
  </data>
  <data name="MissingThreadBreakEvent" xml:space="preserve">
    <value>Failed to find thread {0} for break event</value>
  </data>
  <data name="Error_ExePathInvalid" xml:space="preserve">
    <value>Program path '{0}' is missing or invalid.

{1} failed with message: {2}

This may occur if the process's executable was changed after the process was started, such as when installing an update. Try re-launching the application or restarting the machine.</value>
    <comment>0: exe path passed in
1: Name of the debugger (ex: 'GDB')
2: Message from GDB</comment>
  </data>
  <data name="Warning_SourceFileOutOfDate_Arg2" xml:space="preserve">
    <value>Warning: Source file '{0}' is newer than module file '{1}'.</value>
    <comment>0 = source file path, 1 = module file path</comment>
  </data>
  <data name="Warning_UsingDefaultArchitecture" xml:space="preserve">
    <value>Warning: Debuggee TargetArchitecture not detected, assuming x86_64.</value>
  </data>
  <data name="Warning_DarwinDebuggerUnsigned" xml:space="preserve">
    <value>Debugger executable '{0}' is not signed. As a result, debugging may not work properly.</value>
    <comment>0 = debugger path</comment>
  </data>
  <data name="Error_FailedToGetTargetArchitecture" xml:space="preserve">
    <value>Failed to obtain target architecture.</value>
  </data>
  <data name="Error_FailedToGetExePath" xml:space="preserve">
    <value>Failed to get executable path with error '{0}'.</value>
    <comment>0 = failure message</comment>
  </data>
  <data name="Error_PTraceFailure" xml:space="preserve">
    <value>Attaching to process {0} with {1} failed because of insufficient privileges with error message '{2}'.

To attach to an application on Linux, login as super user or set ptrace_scope to 0.
See https://aka.ms/miengine-gdb-troubleshooting for details.</value>
    <comment>{0} process pid
{1} Debugger
{2} Error message</comment>
  </data>
  <data name="Error_UnsupportedPlatform" xml:space="preserve">
    <value>Unsupported platform.</value>
  </data>
  <data name="DebuggingWillAbort" xml:space="preserve">
    <value>Debugging will now abort.</value>
  </data>
  <data name="Warning_UncheckedExceptionsInCheckedCategory" xml:space="preserve">
    <value>Warning: One or more C++ exceptions are unchecked while '&lt;All C++ Exceptions not in this list&gt;' is enabled. This is unsupported for GDB and the debugger will break on all C++ exceptions.
</value>
    <comment>S</comment>
  </data>
  <data name="Warning_ExceptionsNotSupported" xml:space="preserve">
    <value>Warning: Exceptions are not supported in this scenario.
</value>
  </data>
  <data name="Exception_Thrown" xml:space="preserve">
    <value>Exception{0} thrown at 0x{1:X}.</value>
    <comment>0 = optional exception name, 1 = address</comment>
  </data>
  <data name="Exception_Thrown_with_Source" xml:space="preserve">
    <value>Exception{0} thrown at 0x{1:X} in {2}.</value>
    <comment>0 = optional exception name, 1 = address, 2 = exception file</comment>
  </data>
  <data name="UnknownBreakpoint" xml:space="preserve">
    <value>Hit breakpoint {0} at 0x{1:x}.</value>
    <comment>0 = breakpoint number, 1 = address</comment>
  </data>
  <data name="UnknownWatchpoint" xml:space="preserve">
    <value>Hit watchpoint {0} at 0x{1:x}.</value>
    <comment>0 = watchpoint number, 1 = address</comment>
  </data>
  <data name="UnknownWatchpointWithExpression" xml:space="preserve">
    <value>Hit watchpoint {0}: {1} at 0x{2:x}.</value>
    <comment>0 = watchpoint number, 1 = expression, 2 = address</comment>
  </data>
  <data name="UnknownWatchpointOldValue" xml:space="preserve">
    <value>Old value = {0}</value>
    <comment>0 = old value of watchpoint</comment>
  </data>
  <data name="UnknownWatchpointNewValue" xml:space="preserve">
    <value>New value = {0}</value>
    <comment>0 = new value of watchpoint</comment>
  </data>
</root>