<?xml version="1.0" standalone="yes"?>
<xs:schema targetNamespace="http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014" xmlns:mstns="http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014" xmlns="http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" attributeFormDefault="unqualified" elementFormDefault="qualified">
  <xs:element name="AndroidLaunchOptions">
    <xs:annotation>
      <xs:documentation>Instructs the debugger to launch an Android Application.</xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:attribute name="Package" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>Name of the Android package to launch. Example: 'com.example.hellojni'</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="LaunchActivity" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Name of the activity class to start. Example: '.HelloJni'
            This is required if Attach is false.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="SDKRoot" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>Full path to the root of the Android SDK.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NDKRoot" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>Full path to the root of the Android NDK.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="IntermediateDirectory" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>Full path to the directory where files from the device/emulator will be downloaded to. This directory is added to the SO Lib search path automatically.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="DeviceId" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>Adb device id of the emulator/device to launch to.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="LogcatServiceId" use="optional">
        <xs:annotation>
          <xs:documentation>
            Optional attribute which contains the GUID of logcat viewer VS Service id used by this type of project. If provided, the debugger will
            send events when processes in this application start. The service must implement IVsCustomDebuggerEventHandler110
            (from Microsoft.VisualStudio.Debugger.Interop.11.0.dll/msdbg110.h). Services can be registered in the registry
            ($RootKey$\Services\{VsService}), or through the VS shell IProfferService interface. The following messages are provided:

            MessageCode         Description
            0 (NewProcess)      A new process has been started in the application. VsComponentMessage.Parameter1 will be the package name (string),
            VsComponentMessage.Parameter2 will be the process id (integer)

            The source id used by the Android debug launcher is 1CED0608-638C-4B00-A1D2-CE56B1B672FA.
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="[\da-fA-F]{8}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{12}"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="Attach" type="xs:boolean" use="optional" default="false">
        <xs:annotation>
          <xs:documentation>
            If true, attach to a running process of this Package rather than launching.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="SourceRoots" type="xs:string" use="optional" default="">
      </xs:attribute>
      <xs:attribute name="JVMPort" type="xs:int" use="optional" default="65534">
      </xs:attribute>
      <xs:attribute name="JVMHost" type="xs:string" use="optional" default="localhost">
      </xs:attribute>
      <xs:attributeGroup ref="CommonAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="IOSLaunchOptions">
    <xs:annotation>
      <xs:documentation>Intructs the debugger how to launch an iOS application.</xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:attribute name="RemoteMachineName" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The name of the target machine</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PackageId" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The package id of the package to debug</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="vcremotePort" type="xs:int" use="required">
        <xs:annotation>
          <xs:documentation>The port number of the VC remote endpoint to connect to</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="IOSDebugTarget" use="required">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>Indicates if the debugger should debug to the simulator or a device.</xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Device" />
            <xs:enumeration value="Simulator" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="DeviceUdid" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>The 40 digit UDID of the iOS device to be targeted in the case that IOSDebugTarget is set to "Device"</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="Secure" use="required">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>If true, use TSL security.</xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string">
            <xs:enumeration value="True" />
            <xs:enumeration value="False" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attributeGroup ref="CommonAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name="TargetArchitecture">
    <xs:annotation>
      <xs:documentation>Architecture of the target application. Examples: arm, x86</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="x86"/>
      <xs:enumeration value="arm"/>
      <xs:enumeration value="arm64"/>
      <xs:enumeration value="mips"/>
      <xs:enumeration value="x64"/>
      <xs:enumeration value="amd64"/>
      <xs:enumeration value="x86_64"/>

      <!--Allow them in upper case also-->
      <xs:enumeration value="X86"/>
      <xs:enumeration value="ARM"/>
      <xs:enumeration value="ARM64"/>
      <xs:enumeration value="MIPS"/>
      <xs:enumeration value="X64"/>
      <xs:enumeration value="AMD64"/>
      <xs:enumeration value="X86_64"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="MIMode">
    <xs:annotation>
      <xs:documentation>Indicates the console debugger that the MIDebugEngine will connect to</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="gdb"/>
      <xs:enumeration value="lldb"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="EnvironmentEntry">
    <xs:annotation>
      <xs:documentation>A name value pair for an environment variable that should be set as part of LocalLaunchOptions</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="Name" type="xs:string">
          <xs:annotation>
            <xs:documentation>The name of the variable</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Value" type="xs:string">
          <xs:annotation>
            <xs:documentation>The value of the variable</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="EnvironmentEntryList">
    <xs:sequence>
      <xs:element name="EnvironmentEntry" minOccurs="0" maxOccurs="unbounded" type="EnvironmentEntry"/>
    </xs:sequence>
  </xs:complexType>
  <xs:attributeGroup name="CommonAttributes">
    <xs:attribute name="TargetArchitecture" use="optional" type="TargetArchitecture"/>
    <xs:attribute name="AbsolutePrefixSOLibSearchPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Absolute prefix for directories to search for shared library symbols</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="AdditionalSOLibSearchPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Semicolon separated list of directories to use to search for .so files. Example: 'c:\dir1;c:\dir2'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="MIMode" type="MIMode" use="optional"/>
    <xs:attribute name="WaitDynamicLibLoad" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>
          If true, wait for dynamic library load to finish.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="LocalLaunchOptions">
    <xs:annotation>
      <xs:documentation>Instructs the debugger to launch a local MI Debugger process and connect to a remote MI Debugger Server.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseLaunchOptions">
          <xs:attribute name="MIDebuggerPath" type="xs:string" use="required">
            <xs:annotation>
              <xs:documentation>Path to the MI Debugger executable. If only the executable name is provided, it will attempt to search $PATH for the location of the executable.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MIDebuggerArgs" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Arguments for the MI Debugger executable.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MIDebuggerServerAddress" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Network address of the MI Debugger Server to connect to (example: localhost:1234).</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseExtendedRemote" type="xs:boolean" use="optional">
            <xs:annotation>
              <xs:documentation>If true, use gdb extended-remote mode to connect to gdbserver.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DebugServer" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Full path to the server executable. If non-null then the MIEngine will start the server.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DebugServerArgs" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Arguments to the debug server.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ServerStarted" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Wait for a line containing this pattern in the debug server output. Pattern is a regular expression in Regex format.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FilterStdout" type="xs:boolean" use="optional">
            <xs:annotation>
              <xs:documentation>Log stdout to debug output. Examine content for ServerStarted pattern</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FilterStderr" type="xs:boolean" use="optional">
            <xs:annotation>
              <xs:documentation>Log stderr to debug output. Examine content for ServerStarted pattern</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ServerLaunchTimeout" type="xs:int" use="optional">
            <xs:annotation>
              <xs:documentation>How long, in milliseconds, to wait for the DebugServer executable to start and ServerStarted pattern to be found.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ExternalConsole" type="xs:boolean" use="optional">
            <xs:annotation>
              <xs:documentation>
                If enabled, this tells the MIEngine that the target process should run in a new console window which
                is external to the debugger UI.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="PipeLaunchOptions">
    <xs:annotation>
      <xs:documentation>Instructions the debugger to connect to an instance of an MI Debugger running on the target computer through some sort of standard input/output pipe (ex: telnet).</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseLaunchOptions">
          <xs:sequence>
            <xs:element name="PipeEnvironment" minOccurs="0" maxOccurs="1" type="EnvironmentEntryList">
              <xs:annotation>
                <xs:documentation>Option list of environment variables to set for pipe program.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="PipePath" type="xs:string" use="required">
            <xs:annotation>
              <xs:documentation>Path on the VS computer to an executable to run to establish a standard input/output pipe to the target computer. This should either be a full path to an executable or the name of a program on the PATH.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PipeArguments" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Any arguments to pass to this program.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PipeCommandArguments" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>Arguments passed to the pipe executable to run a remote Unix (ex: bash or similar) shell command. This is used for running 'kill' on the remote system, or other commands that the debugger may need. If not specified, the debugger will do its best without the shell. But some features, such as setting breakpoints in run mode, may not work. This string should contain the string '{0}' which will be replaced with the command to execute.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PipeCwd" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>The fully qualified path to the working directory for the pipe program. If empty, PipePath directory will be used if fully qualified.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="TcpLaunchOptions">
    <xs:annotation>
      <xs:documentation>TODO</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseLaunchOptions">
          <xs:attribute name="Hostname" type="xs:string" use="required">
            <xs:annotation>
              <xs:documentation>TODO</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Port" type="xs:int" use="required">
            <xs:annotation>
              <xs:documentation>TODO</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Secure" type="xs:boolean" use="optional">
            <xs:annotation>
              <xs:documentation>If true, use TSL security</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="SSHLaunchOptions">
    <xs:annotation>
      <xs:documentation>Instructs the debugger to connect to a remote debugger over SSH.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseLaunchOptions">
          <xs:attribute name="TargetMachine" type="xs:string" use="required">
            <xs:annotation>
              <xs:documentation>Network hostname or IP address to connect to.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartRemoteDebuggerCommand" type="xs:string">
            <xs:annotation>
              <xs:documentation>Command to execute on the target machine to launch the remote debugger. If not specified, a default value will be selected for the MIMode.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="SupplementalLaunchOptions">
    <xs:annotation>
      <xs:documentation>Option values that supplement the xml that arrives via the launch command.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="SourceMap" type="SourceMapList" minOccurs="0" maxOccurs="1">
        </xs:element>
        <xs:element name="AttachOptions" type="AttachConnectionList" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>Option values that supplement the xml that arrives via the attach command.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="ServerOptions">
    <xs:annotation>
      <xs:documentation>Instructions for how to setup and run the remote debugging server.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="PreAttachCommand" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Command to run remotely before starting the server.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="MIDebuggerPath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Local path to the MI Debugger executable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="MIDebuggerArgs" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Arguments for the MI Debugger executable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ExePath" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>Path to the executable file. This is a path on the Windows machine.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AttachOptionsForConnection">
    <xs:sequence>
      <xs:element name="SetupCommands" minOccurs="0" maxOccurs="1" type="CommandList">
        <xs:annotation>
          <xs:documentation>One or more GDB/LLDB commands to execute in order to setup the underlying debugger. These are not required.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SourceMap" type="SourceMapList" minOccurs="0" maxOccurs="1">
      </xs:element>
      <xs:element name="ServerOptions" type="ServerOptions" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>If specified then attach using client-server mode.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SymbolLoadInfo" minOccurs="0" maxOccurs="1" type="SymbolLoadInfo"/>
    </xs:sequence>
    <xs:attribute name="AdditionalSOLibSearchPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Semicolon separated list of directories to use to search for .so files. Example: 'c:\dir1;c:\dir2'</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="MIMode" type="MIMode" use="required"/>
    <xs:attribute name="WorkingDirectory" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Working directory on the remote device if remote debugging, on the local device if client-server debugging.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="DebugChildProcesses" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>
          If true, automatically attach debugger to any child processes created.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="VisualizerFile" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>.natvis file to be used when debugging this platform</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ShowDisplayString" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>
          If true, instead of showing Natvis-DisplayString value as a child of a dummy element, it is shown immediately.
          Should only be enabled if debugger is fast enough providing the value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ConnectionName" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>
          Specific connection these options apply to. If missing or specified as '*' then all connections are matched.
          Matching is done in the order of appearance in a list.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AttachConnectionList">
    <xs:sequence>
      <xs:element name="AttachOptionsForConnection" minOccurs="0" maxOccurs="unbounded" type="AttachOptionsForConnection"/>
    </xs:sequence>
  </xs:complexType>

  <!--base type for LocalLaunchOptions, PipeLaunchOptions, and TcpLaunchOptions -->
  <xs:complexType name="BaseLaunchOptions">
    <xs:sequence>
       <xs:element name="Environment" minOccurs="0" maxOccurs="1" type="EnvironmentEntryList">
          <xs:annotation>
            <xs:documentation>Option list of environment variables to set for launch.</xs:documentation>
          </xs:annotation>
        </xs:element>
      <xs:element name="SetupCommands" minOccurs="0" maxOccurs="1" type="CommandList">
        <xs:annotation>
          <xs:documentation>One or more GDB/LLDB commands to execute in order to setup the underlying debugger. These are not required.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CustomLaunchSetupCommands" minOccurs="0" maxOccurs="1" type="CommandList">
        <xs:annotation>
          <xs:documentation>
            If provided, this replaces the default commands used to launch a target with some other commands. For example,
            this can be '-target-attach' in order to attach to a target process. An empty command list replaces the launch commands with nothing,
            which can be useful if the debugger is being provided launch options as command line options.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="LaunchCompleteCommand" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            The command to execute after the debugger is fully setup in order to cause the target process to run.
            The default value is 'exec-run'.
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="exec-run">
              <xs:annotation>
                <xs:documentation>Execute the 'exec-run' MI command which will spawn a new process and begin executing it.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="exec-continue">
              <xs:annotation>
                <xs:documentation>
                  Execute the 'exec-continue' MI command which will resume from stopped state. This is useful if
                  the result of setting up the debugger is that the debuggee is in break state.
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="None">
              <xs:annotation>
                <xs:documentation>No command should be executed. This is useful if the target is already ready to go.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="SourceMap" minOccurs="0" maxOccurs="1" type="SourceMapList">
        <xs:annotation>
          <xs:documentation>
            If provided this list is used to map source file names found in the subtrees pointed to by these entries.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SymbolLoadInfo" minOccurs="0" maxOccurs="1" type="SymbolLoadInfo"/>
    </xs:sequence>
    <xs:attribute name="ExePath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>
          Path to the executable file. For LocalLaunchOptions, this is a path on the Windows machine,
          for Pipe, this is a path on the remote machine. This path is not required if the project system provides
          it through the LaunchDebugTargets structure.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ExeArguments" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Any arguments to pass along to the target process in launch scenarios</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="WorkingDirectory" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Working directory on the remote device to use in launch scenarios</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="VisualizerFile" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>.natvis file to be used when debugging this platform</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ShowDisplayString" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>
          If true, instead of showing Natvis-DisplayString value as a child of a dummy element, it is shown immediately.
          Should only be enabled if debugger is fast enough providing the value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ProcessId" type="xs:int" use="optional">
      <xs:annotation>
        <xs:documentation>If supplied, the debugger will attach to the process rather than launching a new one. Note that some operating systems will require admin rights to do this.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="CoreDumpPath" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Path to a core dump file for the specified executable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="DebugChildProcesses" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>
          If true, automatically attach debugger to any child processes created.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="CommonAttributes"/>
  </xs:complexType>
  <xs:complexType name="Command">
    <xs:annotation>
      <xs:documentation>The GDB/LLDB command to execute</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="IgnoreFailures" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>If true, failures from the command should be ignored. Default value is false.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Description" type="xs:string">
          <xs:annotation>
            <xs:documentation>Optional description for the command. This may be shown in a progress dialog if the command takes a long time.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="CommandList">
    <xs:sequence>
      <xs:element name="Command" minOccurs="0" maxOccurs="unbounded" type="Command"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SourceMapEntry">
    <xs:annotation>
      <xs:documentation>Current and compile-time paths to the same source trees. Files found under the EditorPath are mapped to the CompileTimePath path for breakpoint matching and mapped from CompileTimePath to EditorPath when displaying stacktrace locations.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="EditorPath" type="xs:string">
          <xs:annotation>
            <xs:documentation>The path to the source tree the editor will use.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="CompileTimePath" type="xs:string">
          <xs:annotation>
            <xs:documentation>The path to the source tree at compile time.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="UseForBreakpoints" type="xs:boolean" default="false">
          <xs:annotation>
            <xs:documentation>False if entry is only used for stack frame location mapping. True if this entry should also be used when specifying breakpoint locations.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="SourceMapList">
    <xs:sequence>
      <xs:element name="SourceMapEntry" minOccurs="0" maxOccurs="unbounded" type="SourceMapEntry"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SymbolLoadInfo">
    <xs:annotation>
      <xs:documentation>Supports explcit control of symbol loading. The processing of Exceptions lists and symserver entries requires WaitDynamicLoadLib to be true.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="LoadAll" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>If true, symbols for all libs will be loaded, otherwise no solib symbols will be loaded. Modified by ExceptionList. Default value is true.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ExceptionList" type="xs:string" use="optional">
          <xs:annotation>
            <xs:documentation>List of filenames (wildcards allowed). Modifies behavior of LoadAll. If LoadAll is true then don't load symbols for libs that match any name in the list. Otherwise only load symbols for libs that match.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

</xs:schema>
