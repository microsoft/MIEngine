<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This is a target file used to generate + validate LaunchOptions.xsd.types.designer.cs. The way this works is that we have a baseline
  file checked in. This target will create a new one, and if it is different from the baseline, it will update the baseline. -->
  <Target Name="BeforeBuild"
          Inputs="LaunchOptions.xsd"
          Outputs="$(IntermediateOutputPath)LaunchOptions.cs">
    <!-- First validate the tools we need are where we expect -->
    <Error Condition="'$(SDK40ToolsPath)'==''" Text="SDK40ToolsPath msbuild property is undefined." />
    <Error Condition="!Exists('$(SDK40ToolsPath)xsd.exe')" Text="xsd.exe does not exist in the SDK40ToolsPath ($(SDK40ToolsPath)xsd.exe)." />

    <!-- Convert the .xsd -> types -->
    <MakeDir Condition="!Exists('$(IntermediateOutputPath)')" Directories="$(IntermediateOutputPath)" />
    <PropertyGroup>
      <XsdParameters>LaunchOptions.xsd /classes /namespace:$(RootNamespace).Xml.LaunchOptions </XsdParameters>
      <XsdParameters>$(XsdParameters) /out:"$(IntermediateOutputPath)."</XsdParameters>
      <XsdParameters>$(XsdParameters) /fields</XsdParameters>

      <XsdCandidateFile>$(IntermediateOutputPath)LaunchOptions.cs</XsdCandidateFile>

      <XsdCodeFile>LaunchOptions.xsd.types.designer.cs</XsdCodeFile>
    </PropertyGroup>
    <Exec Command="&quot;$(SDK40ToolsPath)xsd.exe&quot; $(XsdParameters)" />

    <!-- Remove non-portable attributes if we're building for CoreCLR -->
    <PropertyGroup>
      <LineEndingRegex>\r\n|\n|\r</LineEndingRegex>
      <SerializableRegex>^.*\[System.SerializableAttribute\(.*[$(LineEndingRegex)]+</SerializableRegex>
      <DesignerCategoryRegex>^.*\[System.ComponentModel.DesignerCategoryAttribute\(.*[$(LineEndingRegex)]+</DesignerCategoryRegex>
      <CandidateFileContents>$([System.IO.File]::ReadAllText($(XsdCandidateFile)))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(SerializableRegex), "", RegexOptions.Multiline))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(DesignerCategoryRegex), "", RegexOptions.Multiline))</CandidateFileContents>
    </PropertyGroup>
    <WriteLinesToFile File="$(XsdCandidateFile)"
                      Lines="$(CandidateFileContents)"
                      Overwrite="true" />

    <!-- Update the checked-in types designer file if it is out of date -->
    <Message Text="Comparing '$(XsdCandidateFile)' to '$(XsdCodeFile)'" />
    <PropertyGroup>
      <!-- Read files from disk, remove comments, normalize whitespace, and account for differences in Mono XSD.exe -->
      <LineEndingRegex>\r\n|\n|\r</LineEndingRegex>
      <CommentRegex>^\s*//.*[$(LineEndingRegex)]+</CommentRegex>
      <GeneratedCodeRegex>^.*\[System.CodeDom.Compiler.GeneratedCodeAttribute\(.*[$(LineEndingRegex)]+</GeneratedCodeRegex>
      <UsingRegex>^\s*using.*[$(LineEndingRegex)]+</UsingRegex>

      <CandidateFileContents>$([System.IO.File]::ReadAllText($(XsdCandidateFile)))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(CommentRegex), "", RegexOptions.Multiline))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(LineEndingRegex), "%0D%0A", RegexOptions.Multiline))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(GeneratedCodeRegex), "", RegexOptions.Multiline))</CandidateFileContents>
      <CandidateFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CandidateFileContents), $(UsingRegex), "", RegexOptions.Multiline))</CandidateFileContents>

      <CurrentFileContents>$([System.IO.File]::ReadAllText($(XsdCodeFile)))</CurrentFileContents>
      <CurrentFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CurrentFileContents), $(CommentRegex), "", RegexOptions.Multiline))</CurrentFileContents>
      <CurrentFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CurrentFileContents), $(LineEndingRegex), "%0D%0A", RegexOptions.Multiline))</CurrentFileContents>
      <CurrentFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CurrentFileContents), $(GeneratedCodeRegex), "", RegexOptions.Multiline))</CurrentFileContents>
      <CurrentFileContents>$([System.Text.RegularExpressions.Regex]::Replace($(CurrentFileContents), $(UsingRegex), "", RegexOptions.Multiline))</CurrentFileContents>

      <ContentsEqual>$([System.String]::Equals($(CandidateFileContents), $(CurrentFileContents), StringComparison.Ordinal))</ContentsEqual>
    </PropertyGroup>

    <!-- If the files don't match, replace the checked-in copy with the candidate -->
    <Message Condition="'$(ContentsEqual)' == 'false'" Text="Updating $(XsdCodeFile)" />
    <Message Condition="'$(ContentsEqual)' == 'true'" Text="$(XsdCodeFile) is up to date" />

    <Copy Condition="'$(ContentsEqual)' == 'false'"
          SourceFiles="$(XsdCandidateFile)"
          DestinationFiles="$(XsdCodeFile)" />

    <!-- If the files dont match on a PR/Release, fail the build. -->
    <Error Condition="'$(ContentsEqual)' == 'false' AND '$(BUILD_BUILDID)' != ''"
          Text="$(XsdCodeFile) has changed and the updated version is not checked in. Please check in the updated version of $(XsdCodeFile)."/>
  </Target>

  <!-- This target is used to generate an XML serializers assembly for the types in LaunchOptions.xsd. We can't embed these types
  into MICore as CoreCLR doesn't expose the types needed to make that code work. -->
  <Target Name="GenerateXmlSerializersAssembly"
          AfterTargets="Compile">
    <PropertyGroup>
      <!-- 
        If TEST_LAB_BUILD is set, we are public signing. 
        sgen.exe does not have -publicsign and does not work if a keyfile is passed in. 
      -->
      <SerializationSigningKeyFile Condition="'$(TEST_LAB_BUILD)'==''">$(AssemblyOriginatorKeyFile)</SerializationSigningKeyFile>
      <SerializationSigningCompilerOptions Condition="'$(TEST_LAB_BUILD)'==''">/keyfile:$(SerializationSigningKeyFile)</SerializationSigningCompilerOptions>
      
      <!--
        Add $(MIEngineRoot)src\MICore\SGEN_SHA2_SIGNATUREKEY to enable SHA2 signing for sgen.exe.
      -->
      <SgenSha2SignatureKeyFile Condition="'$(DelaySign)'=='true'">SGEN_SHA2_SIGNATUREKEY</SgenSha2SignatureKeyFile>
      <SerializationSigningCompilerOptions Condition="'$(DelaySign)'=='true'">$(SerializationSigningCompilerOptions) /delaysign $(MIEngineRoot)src\MICore\$(SgenSha2SignatureKeyFile)</SerializationSigningCompilerOptions>

      <RefPath>$(MSBuildFrameworkToolsPath)</RefPath>
    </PropertyGroup>

    <Error Condition="'$(SDK40ToolsPath)'==''" Text="SDK40ToolsPath msbuild property is undefined." />
    <Error Condition="!Exists('$(SDK40ToolsPath)sgen.exe')" Text="sgen.exe does not exist in the SDK40ToolsPath ($(SDK40ToolsPath)xsd.exe)." />

    <RemoveDir Condition="Exists('$(IntermediateOutputPath)sgen')" Directories="$(IntermediateOutputPath)sgen" />
    <MakeDir Directories="$(IntermediateOutputPath)sgen" />
    
    <!-- Compile the types file into an assembly that we can use as input to sgen. We don't want to pass our real assembly as we have some things that sgen doesn't like. -->
    <Csc
        Sources="$(XsdCodeFile);$(GeneratedAssemblyInfoFile);$(SgenSha2SignatureKeyFile)"
        OutputAssembly="$(IntermediateOutputPath)sgen/$(AssemblyName).dll"
        TargetType="Library"
        NoConfig="true"
        NoLogo="$(NoLogo)"
        DelaySign="$(DelaySign)"
        KeyFile="$(SerializationSigningKeyFile)"
        DebugType="none"
        LangVersion="$(LangVersion)"
        References="$(RefPath)/mscorlib.dll;$(RefPath)/System.dll;$(RefPath)/System.Xml.dll"
        />

    <!-- Now generate the serialization assembly -->
    <Exec Command="&quot;$(SDK40ToolsPath)sgen.exe&quot; $(IntermediateOutputPath)sgen/$(AssemblyName).dll /force /compiler:&quot;$(SerializationSigningCompilerOptions)&quot; /keep" />
  </Target>
</Project>
